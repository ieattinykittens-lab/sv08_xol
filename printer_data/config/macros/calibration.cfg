#####################################################################
#                    AUTOMATIC PRINTER CALIBRATION
#####################################################################
#
# Automatically measures printer limits, bed position, and generates 
# optimized configuration values for steppers, QGL, and bed mesh.
#
# INSTALLATION:
#   1. Save this as ~/printer_data/config/macros/calibration.cfg
#   2. Add to printer.cfg: [include macros/calibration.cfg]
#   3. Ensure you have [save_variables] configured:
#      [save_variables]
#      filename: ~/printer_data/config/saved_variables.cfg
#   4. Run FIRMWARE_RESTART
#
# USAGE:
#   FULL_AUTO_CALIBRATION BED_WIDTH=355 BED_HEIGHT=355
#   SHOW_OPTIMIZED_CONFIG
#   (Copy output to printer.cfg, restart, then test)
#
# REQUIREMENTS:
#   - Working probe configuration
#   - Basic stepper limits that allow movement
#   - Safe Z height clearance (10mm default)
#
#####################################################################

[gcode_macro CALIBRATE_PRINTER_LIMITS]
description: Automatically find true X/Y movement limits
gcode:
    {% set safety_margin = params.SAFETY_MARGIN|default(5)|float %}
    {% set step_size = params.STEP_SIZE|default(5)|float %}
    {% set slow_speed = params.SLOW_SPEED|default(300)|int %}
    {% set safe_z = params.SAFE_Z|default(10)|float %}
    
    RESPOND TYPE=command MSG="Starting Automatic Limit Calibration..."
    
    # Home and get to safe position
    G28
    G90
    G1 Z{safe_z} F1200
    
    # Get current configured limits
    {% set x_min_config = printer.configfile.settings.stepper_x.position_min %}
    {% set x_max_config = printer.configfile.settings.stepper_x.position_max %}
    {% set y_min_config = printer.configfile.settings.stepper_y.position_min %}
    {% set y_max_config = printer.configfile.settings.stepper_y.position_max %}
    
    RESPOND MSG="Current X limits: {x_min_config} to {x_max_config}"
    RESPOND MSG="Current Y limits: {y_min_config} to {y_max_config}"
    
    # Move to center for testing
    {% set bed_center_x = (x_min_config + x_max_config) / 2 %}
    {% set bed_center_y = (y_min_config + y_max_config) / 2 %}
    G1 X{bed_center_x} Y{bed_center_y} F3000
    
    RESPOND MSG="Testing X-axis limits..."
    
    # Find X minimum limit
    {% set ns = namespace(x_min_found=false, x_max_found=false, x_min_measured=0, x_max_measured=0) %}
    {% set x_test = bed_center_x %}
    
    {% for i in range(100) %}
        {% if not ns.x_min_found %}
            {% set x_test = x_test - step_size %}
            {% if x_test < (x_min_config - 50) %}
                {% set ns.x_min_found = true %}
            {% else %}
                {% set x_before = printer.gcode_move.gcode_position.x %}
                G1 X{x_test} F{slow_speed}
                G4 P100  # Small delay for position update
                {% set x_after = printer.gcode_move.gcode_position.x %}
                
                # Check if movement was blocked (didn't reach target)
                {% if (x_test - x_after)|abs > (step_size * 0.8) %}
                    {% set ns.x_min_measured = x_after + safety_margin %}
                    SAVE_VARIABLE VARIABLE=measured_x_min VALUE={ns.x_min_measured}
                    RESPOND MSG="X minimum limit: {ns.x_min_measured}"
                    {% set ns.x_min_found = true %}
                {% endif %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    # Find X maximum limit
    G1 X{bed_center_x} Y{bed_center_y} F3000
    {% set x_test = bed_center_x %}
    
    {% for i in range(100) %}
        {% if not ns.x_max_found %}
            {% set x_test = x_test + step_size %}
            {% if x_test > (x_max_config + 50) %}
                {% set ns.x_max_found = true %}
            {% else %}
                {% set x_before = printer.gcode_move.gcode_position.x %}
                G1 X{x_test} F{slow_speed}
                G4 P100
                {% set x_after = printer.gcode_move.gcode_position.x %}
                
                {% if (x_after - x_test)|abs > (step_size * 0.8) %}
                    {% set ns.x_max_measured = x_after - safety_margin %}
                    SAVE_VARIABLE VARIABLE=measured_x_max VALUE={ns.x_max_measured}
                    RESPOND MSG="X maximum limit: {ns.x_max_measured}"
                    {% set ns.x_max_found = true %}
                {% endif %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    RESPOND MSG="Testing Y-axis limits..."
    
    # Find Y minimum limit
    G1 X{bed_center_x} Y{bed_center_y} F3000
    {% set y_test = bed_center_y %}
    {% set ns = namespace(y_min_found=false, y_max_found=false) %}
    
    {% for i in range(100) %}
        {% if not ns.y_min_found %}
            {% set y_test = y_test - step_size %}
            {% if y_test < (y_min_config - 50) %}
                {% set ns.y_min_found = true %}
            {% else %}
                {% set y_before = printer.gcode_move.gcode_position.y %}
                G1 Y{y_test} F{slow_speed}
                G4 P100
                {% set y_after = printer.gcode_move.gcode_position.y %}
                
                {% if (y_test - y_after)|abs > (step_size * 0.8) %}
                    {% set y_min_measured = y_after + safety_margin %}
                    SAVE_VARIABLE VARIABLE=measured_y_min VALUE={y_min_measured}
                    RESPOND MSG="Y minimum limit: {y_min_measured}"
                    {% set ns.y_min_found = true %}
                {% endif %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    # Find Y maximum limit
    G1 X{bed_center_x} Y{bed_center_y} F3000
    {% set y_test = bed_center_y %}
    
    {% for i in range(100) %}
        {% if not ns.y_max_found %}
            {% set y_test = y_test + step_size %}
            {% if y_test > (y_max_config + 50) %}
                {% set ns.y_max_found = true %}
            {% else %}
                {% set y_before = printer.gcode_move.gcode_position.y %}
                G1 Y{y_test} F{slow_speed}
                G4 P100
                {% set y_after = printer.gcode_move.gcode_position.y %}
                
                {% if (y_after - y_test)|abs > (step_size * 0.8) %}
                    {% set y_max_measured = y_after - safety_margin %}
                    SAVE_VARIABLE VARIABLE=measured_y_max VALUE={y_max_measured}
                    RESPOND MSG="Y maximum limit: {y_max_measured}"
                    {% set ns.y_max_found = true %}
                {% endif %}
            {% endif %}
        {% endif %}
    {% endfor %}
    
    SAVE_VARIABLE VARIABLE=limits_calibrated VALUE="{printer.system_stats.cputime}"
    RESPOND MSG="Limit calibration complete! Run SHOW_MEASURED_LIMITS to view."

#####################################################################

[gcode_macro CALIBRATE_BED_POSITION]
description: Manual bed corner verification with guided positioning
gcode:
    RESPOND TYPE=command MSG="Starting Manual Bed Position Calibration..."
    RESPOND MSG="This process will guide you through manually positioning the nozzle"
    RESPOND MSG="over each bed corner for accurate bed position detection."
    RESPOND MSG=""
    RESPOND MSG="INSTRUCTIONS:"
    RESPOND MSG="1. Use VERIFY_BED_CORNER CORNER=FL to start"
    RESPOND MSG="2. Manually jog nozzle to exact corner position"
    RESPOND MSG="3. Run SAVE_BED_CORNER CORNER=FL when positioned"
    RESPOND MSG="4. Repeat for all corners (FL, FR, BL, BR)"
    RESPOND MSG="5. Run CALCULATE_BED_ORIGIN when all corners are saved"
    RESPOND MSG=""
    RESPOND MSG="Available commands:"
    RESPOND MSG="  VERIFY_BED_CORNER CORNER=FL/FR/BL/BR"
    RESPOND MSG="  SAVE_BED_CORNER CORNER=FL/FR/BL/BR"
    RESPOND MSG="  SHOW_BED_CORNERS"
    RESPOND MSG="  CALCULATE_BED_ORIGIN"

[gcode_macro VERIFY_BED_CORNER]
description: Move nozzle to estimated bed corner position
gcode:
    {% set corner = params.CORNER|default("FL")|string %}
    {% set safe_z = params.SAFE_Z|default(5)|float %}
    
    # Get measured limits for estimation
    {% set x_min = printer.save_variables.variables.measured_x_min|default(-50) %}
    {% set x_max = printer.save_variables.variables.measured_x_max|default(350) %}
    {% set y_min = printer.save_variables.variables.measured_y_min|default(-50) %}
    {% set y_max = printer.save_variables.variables.measured_y_max|default(350) %}
    
    {% if x_min == -50 %}
        RESPOND MSG="ERROR: Run CALIBRATE_PRINTER_LIMITS first!"
    {% else %}
        G28
        G90
        
        # Move to estimated corner positions
        {% if corner == "FL" %}
            {% set target_x = x_min + 30 %}
            {% set target_y = y_min + 30 %}
            RESPOND MSG="Moving to estimated FRONT-LEFT corner..."
        {% elif corner == "FR" %}
            {% set target_x = x_max - 30 %}
            {% set target_y = y_min + 30 %}
            RESPOND MSG="Moving to estimated FRONT-RIGHT corner..."
        {% elif corner == "BL" %}
            {% set target_x = x_min + 30 %}
            {% set target_y = y_max - 30 %}
            RESPOND MSG="Moving to estimated BACK-LEFT corner..."
        {% elif corner == "BR" %}
            {% set target_x = x_max - 30 %}
            {% set target_y = y_max - 30 %}
            RESPOND MSG="Moving to estimated BACK-RIGHT corner..."
        {% else %}
            RESPOND MSG="ERROR: Invalid corner. Use FL, FR, BL, or BR"
            {% set corner = "INVALID" %}
        {% endif %}
        
        {% if corner != "INVALID" %}
            G1 X{target_x} Y{target_y} Z{safe_z} F3000
            
            RESPOND MSG="Nozzle positioned near {corner} corner at X{target_x} Y{target_y}"
            RESPOND MSG=""
            RESPOND MSG="NEXT STEPS:"
            RESPOND MSG="1. Use your printer interface to jog the nozzle"
            RESPOND MSG="2. Position it EXACTLY over the {corner} corner of your bed"
            RESPOND MSG="3. The nozzle should be directly above the bed corner edge"
            RESPOND MSG="4. When positioned correctly, run:"
            RESPOND MSG="   SAVE_BED_CORNER CORNER={corner}"
        {% endif %}
    {% endif %}

[gcode_macro SAVE_BED_CORNER]
description: Save current nozzle position as bed corner
gcode:
    {% set corner = params.CORNER|default("FL")|string %}
    {% set current_x = printer.gcode_move.gcode_position.x %}
    {% set current_y = printer.gcode_move.gcode_position.y %}
    
    {% if corner == "FL" %}
        SAVE_VARIABLE VARIABLE=bed_corner_fl_x VALUE={current_x}
        SAVE_VARIABLE VARIABLE=bed_corner_fl_y VALUE={current_y}
        RESPOND MSG="FRONT-LEFT corner saved: X{current_x|round(2)} Y{current_y|round(2)}"
    {% elif corner == "FR" %}
        SAVE_VARIABLE VARIABLE=bed_corner_fr_x VALUE={current_x}
        SAVE_VARIABLE VARIABLE=bed_corner_fr_y VALUE={current_y}
        RESPOND MSG="FRONT-RIGHT corner saved: X{current_x|round(2)} Y{current_y|round(2)}"
    {% elif corner == "BL" %}
        SAVE_VARIABLE VARIABLE=bed_corner_bl_x VALUE={current_x}
        SAVE_VARIABLE VARIABLE=bed_corner_bl_y VALUE={current_y}
        RESPOND MSG="BACK-LEFT corner saved: X{current_x|round(2)} Y{current_y|round(2)}"
    {% elif corner == "BR" %}
        SAVE_VARIABLE VARIABLE=bed_corner_br_x VALUE={current_x}
        SAVE_VARIABLE VARIABLE=bed_corner_br_y VALUE={current_y}
        RESPOND MSG="BACK-RIGHT corner saved: X{current_x|round(2)} Y{current_y|round(2)}"
    {% else %}
        RESPOND MSG="ERROR: Invalid corner. Use FL, FR, BL, or BR"
    {% endif %}
    
    {% if corner in ["FL", "FR", "BL", "BR"] %}
        # Check if all corners are saved
        {% set fl_x = printer.save_variables.variables.bed_corner_fl_x|default(none) %}
        {% set fr_x = printer.save_variables.variables.bed_corner_fr_x|default(none) %}
        {% set bl_x = printer.save_variables.variables.bed_corner_bl_x|default(none) %}
        {% set br_x = printer.save_variables.variables.bed_corner_br_x|default(none) %}
        
        {% set corners_saved = 0 %}
        {% if fl_x %}{% set corners_saved = corners_saved + 1 %}{% endif %}
        {% if fr_x %}{% set corners_saved = corners_saved + 1 %}{% endif %}
        {% if bl_x %}{% set corners_saved = corners_saved + 1 %}{% endif %}
        {% if br_x %}{% set corners_saved = corners_saved + 1 %}{% endif %}
        
        RESPOND MSG="Progress: {corners_saved}/4 corners saved"
        
        {% if corners_saved == 4 %}
            RESPOND MSG=""
            RESPOND MSG="All corners saved! Run CALCULATE_BED_ORIGIN to complete setup."
        {% else %}
            RESPOND MSG="Next: VERIFY_BED_CORNER CORNER=<next_corner>"
        {% endif %}
    {% endif %}

[gcode_macro SHOW_BED_CORNERS]
description: Display all saved bed corner positions
gcode:
    {% set fl_x = printer.save_variables.variables.bed_corner_fl_x|default("Not set") %}
    {% set fl_y = printer.save_variables.variables.bed_corner_fl_y|default("Not set") %}
    {% set fr_x = printer.save_variables.variables.bed_corner_fr_x|default("Not set") %}
    {% set fr_y = printer.save_variables.variables.bed_corner_fr_y|default("Not set") %}
    {% set bl_x = printer.save_variables.variables.bed_corner_bl_x|default("Not set") %}
    {% set bl_y = printer.save_variables.variables.bed_corner_bl_y|default("Not set") %}
    {% set br_x = printer.save_variables.variables.bed_corner_br_x|default("Not set") %}
    {% set br_y = printer.save_variables.variables.bed_corner_br_y|default("Not set") %}
    
    RESPOND TYPE=command MSG="SAVED BED CORNER POSITIONS"
    RESPOND MSG="================================="
    RESPOND MSG="Front-Left  (FL): X{fl_x} Y{fl_y}"
    RESPOND MSG="Front-Right (FR): X{fr_x} Y{fr_y}"
    RESPOND MSG="Back-Left   (BL): X{bl_x} Y{bl_y}"
    RESPOND MSG="Back-Right  (BR): X{br_x} Y{br_y}"
    RESPOND MSG="================================="

[gcode_macro CALCULATE_BED_ORIGIN]
description: Calculate bed origin and dimensions from saved corners
gcode:
    # Get all saved corners
    {% set fl_x = printer.save_variables.variables.bed_corner_fl_x|default(none) %}
    {% set fl_y = printer.save_variables.variables.bed_corner_fl_y|default(none) %}
    {% set fr_x = printer.save_variables.variables.bed_corner_fr_x|default(none) %}
    {% set fr_y = printer.save_variables.variables.bed_corner_fr_y|default(none) %}
    {% set bl_x = printer.save_variables.variables.bed_corner_bl_x|default(none) %}
    {% set bl_y = printer.save_variables.variables.bed_corner_bl_y|default(none) %}
    {% set br_x = printer.save_variables.variables.bed_corner_br_x|default(none) %}
    {% set br_y = printer.save_variables.variables.bed_corner_br_y|default(none) %}
    
    {% if not (fl_x and fr_x and bl_x and br_x) %}
        RESPOND MSG="ERROR: Not all bed corners are saved!"
        RESPOND MSG="Save all corners first using SAVE_BED_CORNER"
    {% else %}
        RESPOND TYPE=command MSG="Calculating bed origin and dimensions..."
        
        # Calculate bed origin (front-left corner)
        {% set bed_origin_x = fl_x %}
        {% set bed_origin_y = fl_y %}
        
        # Calculate measured bed dimensions
        {% set measured_width = fr_x - fl_x %}
        {% set measured_height = bl_y - fl_y %}
        
        # Verify bed is reasonably rectangular
        {% set width_check = br_x - bl_x %}
        {% set height_check = fr_y - fl_y %}
        
        {% set width_diff = (measured_width - width_check)|abs %}
        {% set height_diff = (measured_height - height_check)|abs %}
        
        {% if width_diff > 5 or height_diff > 5 %}
            RESPOND MSG="WARNING: Bed may not be rectangular!"
            RESPOND MSG="Width difference: {width_diff|round(2)}mm"
            RESPOND MSG="Height difference: {height_diff|round(2)}mm"
            RESPOND MSG="Check your corner positions for accuracy."
        {% endif %}
        
        # Save calculated values
        SAVE_VARIABLE VARIABLE=bed_origin_x VALUE={bed_origin_x}
        SAVE_VARIABLE VARIABLE=bed_origin_y VALUE={bed_origin_y}
        SAVE_VARIABLE VARIABLE=measured_bed_width VALUE={measured_width}
        SAVE_VARIABLE VARIABLE=measured_bed_height VALUE={measured_height}
        SAVE_VARIABLE VARIABLE=bed_calibrated VALUE="{printer.system_stats.cputime}"
        
        RESPOND MSG="Bed calibration complete!"
        RESPOND MSG="Bed origin: X{bed_origin_x|round(2)} Y{bed_origin_y|round(2)}"
        RESPOND MSG="Measured dimensions: {measured_width|round(1)} x {measured_height|round(1)} mm"
        RESPOND MSG=""
        RESPOND MSG="You can now run GENERATE_OPTIMIZED_CONFIG"
    {% endif %}

#####################################################################

[gcode_macro GENERATE_OPTIMIZED_CONFIG]
description: Calculate optimal configuration from measurements
gcode:
    {% set bed_width = params.BED_WIDTH|default(355)|float %}
    {% set bed_height = params.BED_HEIGHT|default(355)|float %}
    {% set probe_margin = params.PROBE_MARGIN|default(15)|float %}
    {% set gantry_margin = params.GANTRY_MARGIN|default(5)|float %}
    
    # Get measured values
    {% set x_min = printer.save_variables.variables.measured_x_min|default(none) %}
    {% set x_max = printer.save_variables.variables.measured_x_max|default(none) %}
    {% set y_min = printer.save_variables.variables.measured_y_min|default(none) %}
    {% set y_max = printer.save_variables.variables.measured_y_max|default(none) %}
    {% set bed_origin_x = printer.save_variables.variables.bed_origin_x|default(0) %}
    {% set bed_origin_y = printer.save_variables.variables.bed_origin_y|default(0) %}
    
    {% if not x_min or not x_max or not y_min or not y_max %}
        RESPOND MSG="ERROR: Missing measurements! Run calibration steps first."
    {% else %}
        RESPOND TYPE=command MSG="Generating Optimized Configuration..."
        
        # Calculate gantry corners with margins
        {% set gantry_min_x = x_min + gantry_margin %}
        {% set gantry_max_x = x_max - gantry_margin %}
        {% set gantry_min_y = y_min + gantry_margin %}
        {% set gantry_max_y = y_max - gantry_margin %}
        
        # Calculate probe points with margins from bed edges
        {% set fl_x = bed_origin_x + probe_margin %}
        {% set fl_y = bed_origin_y + probe_margin %}
        {% set bl_x = bed_origin_x + probe_margin %}
        {% set bl_y = bed_origin_y + bed_height - probe_margin %}
        {% set br_x = bed_origin_x + bed_width - probe_margin %}
        {% set br_y = bed_origin_y + bed_height - probe_margin %}
        {% set fr_x = bed_origin_x + bed_width - probe_margin %}
        {% set fr_y = bed_origin_y + probe_margin %}
        
        # Calculate mesh bounds
        {% set mesh_min_x = bed_origin_x + probe_margin %}
        {% set mesh_min_y = bed_origin_y + probe_margin %}
        {% set mesh_max_x = bed_origin_x + bed_width - probe_margin %}
        {% set mesh_max_y = bed_origin_y + bed_height - probe_margin %}
        
        # Store all calculated values
        SAVE_VARIABLE VARIABLE=opt_position_min_x VALUE={x_min}
        SAVE_VARIABLE VARIABLE=opt_position_max_x VALUE={x_max}
        SAVE_VARIABLE VARIABLE=opt_position_min_y VALUE={y_min}
        SAVE_VARIABLE VARIABLE=opt_position_max_y VALUE={y_max}
        SAVE_VARIABLE VARIABLE=opt_gantry_min_x VALUE={gantry_min_x}
        SAVE_VARIABLE VARIABLE=opt_gantry_max_x VALUE={gantry_max_x}
        SAVE_VARIABLE VARIABLE=opt_gantry_min_y VALUE={gantry_min_y}
        SAVE_VARIABLE VARIABLE=opt_gantry_max_y VALUE={gantry_max_y}
        SAVE_VARIABLE VARIABLE=opt_fl_x VALUE={fl_x}
        SAVE_VARIABLE VARIABLE=opt_fl_y VALUE={fl_y}
        SAVE_VARIABLE VARIABLE=opt_bl_x VALUE={bl_x}
        SAVE_VARIABLE VARIABLE=opt_bl_y VALUE={bl_y}
        SAVE_VARIABLE VARIABLE=opt_br_x VALUE={br_x}
        SAVE_VARIABLE VARIABLE=opt_br_y VALUE={br_y}
        SAVE_VARIABLE VARIABLE=opt_fr_x VALUE={fr_x}
        SAVE_VARIABLE VARIABLE=opt_fr_y VALUE={fr_y}
        SAVE_VARIABLE VARIABLE=opt_mesh_min_x VALUE={mesh_min_x}
        SAVE_VARIABLE VARIABLE=opt_mesh_min_y VALUE={mesh_min_y}
        SAVE_VARIABLE VARIABLE=opt_mesh_max_x VALUE={mesh_max_x}
        SAVE_VARIABLE VARIABLE=opt_mesh_max_y VALUE={mesh_max_y}
        SAVE_VARIABLE VARIABLE=config_generated VALUE="{printer.system_stats.cputime}"
        
        RESPOND MSG="Configuration generated successfully!"
    {% endif %}

#####################################################################

[gcode_macro FULL_AUTO_CALIBRATION]
description: Complete automatic calibration process (with manual bed verification)
gcode:
    {% set bed_width = params.BED_WIDTH|default(355)|float %}
    {% set bed_height = params.BED_HEIGHT|default(355)|float %}
    {% set safety_margin = params.SAFETY_MARGIN|default(5)|float %}
    {% set probe_margin = params.PROBE_MARGIN|default(15)|float %}
    
    RESPOND TYPE=command MSG="STARTING FULL CALIBRATION PROCESS"
    RESPOND MSG="Bed Size: {bed_width}x{bed_height}mm"
    RESPOND MSG="Safety Margin: {safety_margin}mm, Probe Margin: {probe_margin}mm"
    RESPOND MSG=""
    
    # Step 1: Measure limits (automatic)
    RESPOND MSG="Step 1/3: Measuring printer movement limits..."
    CALIBRATE_PRINTER_LIMITS SAFETY_MARGIN={safety_margin}
    
    # Step 2: Manual bed position (requires user interaction)
    RESPOND MSG="Step 2/3: Manual bed position calibration..."
    RESPOND MSG="======================================="
    RESPOND MSG="MANUAL STEP REQUIRED:"
    RESPOND MSG="The automatic process is now paused."
    RESPOND MSG="You must manually calibrate bed position:"
    RESPOND MSG=""
    RESPOND MSG="1. Run: VERIFY_BED_CORNER CORNER=FL"
    RESPOND MSG="2. Manually jog nozzle to front-left bed corner"
    RESPOND MSG="3. Run: SAVE_BED_CORNER CORNER=FL"
    RESPOND MSG="4. Repeat for FR, BL, BR corners"
    RESPOND MSG="5. Run: CALCULATE_BED_ORIGIN"
    RESPOND MSG="6. Run: FINISH_AUTO_CALIBRATION"
    RESPOND MSG="======================================="
    RESPOND MSG=""
    RESPOND MSG="Calibration paused. Complete manual steps above."

[gcode_macro FINISH_AUTO_CALIBRATION]
description: Complete calibration after manual bed positioning
gcode:
    {% set bed_width = params.BED_WIDTH|default(355)|float %}
    {% set bed_height = params.BED_HEIGHT|default(355)|float %}
    {% set probe_margin = params.PROBE_MARGIN|default(15)|float %}
    
    # Check if bed calibration is complete
    {% set bed_origin_x = printer.save_variables.variables.bed_origin_x|default(none) %}
    {% if not bed_origin_x %}
        RESPOND MSG="ERROR: Bed calibration not complete!"
        RESPOND MSG="Complete the manual bed corner calibration first."
    {% else %}
        RESPOND MSG="Step 3/3: Calculating optimized configuration..."
        GENERATE_OPTIMIZED_CONFIG BED_WIDTH={bed_width} BED_HEIGHT={bed_height} PROBE_MARGIN={probe_margin}
        
        RESPOND MSG="CALIBRATION COMPLETE!"
        RESPOND MSG="======================================="
        RESPOND MSG="Next steps:"
        RESPOND MSG="1. Run SHOW_OPTIMIZED_CONFIG"
        RESPOND MSG="2. Copy the output to your printer.cfg"
        RESPOND MSG="3. Run FIRMWARE_RESTART"
        RESPOND MSG="4. Test with TEST_NEW_CONFIG"
        RESPOND MSG="======================================="
    {% endif %}

#####################################################################

[gcode_macro SHOW_MEASURED_LIMITS]
description: Display measured printer limits and bed position
gcode:
    {% set x_min = printer.save_variables.variables.measured_x_min|default("Not measured") %}
    {% set x_max = printer.save_variables.variables.measured_x_max|default("Not measured") %}
    {% set y_min = printer.save_variables.variables.measured_y_min|default("Not measured") %}
    {% set y_max = printer.save_variables.variables.measured_y_max|default("Not measured") %}
    {% set bed_x = printer.save_variables.variables.bed_origin_x|default("Not calibrated") %}
    {% set bed_y = printer.save_variables.variables.bed_origin_y|default("Not calibrated") %}
    {% set bed_width = printer.save_variables.variables.measured_bed_width|default("Not measured") %}
    {% set bed_height = printer.save_variables.variables.measured_bed_height|default("Not measured") %}
    
    RESPOND TYPE=command MSG="MEASURED PRINTER CHARACTERISTICS"
    RESPOND MSG="======================================="
    RESPOND MSG="MOVEMENT LIMITS:"
    RESPOND MSG="X-Axis Range: {x_min} to {x_max} mm"
    RESPOND MSG="Y-Axis Range: {y_min} to {y_max} mm" 
    {% if x_min != "Not measured" %}
        {% set x_travel = x_max - x_min %}
        {% set y_travel = y_max - y_min %}
        RESPOND MSG="Total Travel: X{x_travel|round(0)}mm, Y{y_travel|round(0)}mm"
    {% endif %}
    RESPOND MSG=""
    RESPOND MSG="BED POSITION:"
    RESPOND MSG="Bed Origin: X{bed_x}, Y{bed_y}"
    RESPOND MSG="Bed Dimensions: {bed_width} x {bed_height} mm"
    
    # Show corner status
    {% set fl_x = printer.save_variables.variables.bed_corner_fl_x|default(none) %}
    {% set fr_x = printer.save_variables.variables.bed_corner_fr_x|default(none) %}
    {% set bl_x = printer.save_variables.variables.bed_corner_bl_x|default(none) %}
    {% set br_x = printer.save_variables.variables.bed_corner_br_x|default(none) %}
    
    {% set corners_saved = 0 %}
    {% if fl_x %}{% set corners_saved = corners_saved + 1 %}{% endif %}
    {% if fr_x %}{% set corners_saved = corners_saved + 1 %}{% endif %}
    {% if bl_x %}{% set corners_saved = corners_saved + 1 %}{% endif %}
    {% if br_x %}{% set corners_saved = corners_saved + 1 %}{% endif %}
    
    RESPOND MSG="Bed Corners Calibrated: {corners_saved}/4"
    RESPOND MSG="======================================="

[gcode_macro SHOW_OPTIMIZED_CONFIG]
description: Display the complete optimized configuration
gcode:
    {% set px_min = printer.save_variables.variables.opt_position_min_x|default(none) %}
    {% set px_max = printer.save_variables.variables.opt_position_max_x|default(none) %}
    {% set py_min = printer.save_variables.variables.opt_position_min_y|default(none) %}
    {% set py_max = printer.save_variables.variables.opt_position_max_y|default(none) %}
    {% set gx_min = printer.save_variables.variables.opt_gantry_min_x|default(none) %}
    {% set gx_max = printer.save_variables.variables.opt_gantry_max_x|default(none) %}
    {% set gy_min = printer.save_variables.variables.opt_gantry_min_y|default(none) %}
    {% set gy_max = printer.save_variables.variables.opt_gantry_max_y|default(none) %}
    {% set fl_x = printer.save_variables.variables.opt_fl_x|default(none) %}
    {% set fl_y = printer.save_variables.variables.opt_fl_y|default(none) %}
    {% set bl_x = printer.save_variables.variables.opt_bl_x|default(none) %}
    {% set bl_y = printer.save_variables.variables.opt_bl_y|default(none) %}
    {% set br_x = printer.save_variables.variables.opt_br_x|default(none) %}
    {% set br_y = printer.save_variables.variables.opt_br_y|default(none) %}
    {% set fr_x = printer.save_variables.variables.opt_fr_x|default(none) %}
    {% set fr_y = printer.save_variables.variables.opt_fr_y|default(none) %}
    {% set mx_min = printer.save_variables.variables.opt_mesh_min_x|default(none) %}
    {% set my_min = printer.save_variables.variables.opt_mesh_min_y|default(none) %}
    {% set mx_max = printer.save_variables.variables.opt_mesh_max_x|default(none) %}
    {% set my_max = printer.save_variables.variables.opt_mesh_max_y|default(none) %}
    
    {% if not px_min %}
        RESPOND MSG="ERROR: No optimized configuration found!"
        RESPOND MSG="Run FULL_AUTO_CALIBRATION first."
    {% else %}
        RESPOND TYPE=command MSG="OPTIMIZED KLIPPER CONFIGURATION"
        RESPOND MSG="==============================================================="
        RESPOND MSG="# Copy the sections below to your printer.cfg file"
        RESPOND MSG="# Generated by Auto-Calibration System"
        RESPOND MSG=""
        RESPOND MSG="[stepper_x]"
        RESPOND MSG="position_min: {px_min}"
        RESPOND MSG="position_max: {px_max}"
        RESPOND MSG="position_endstop: {px_max}  # Adjust if your endstop is different"
        RESPOND MSG=""
        RESPOND MSG="[stepper_y]"
        RESPOND MSG="position_min: {py_min}"
        RESPOND MSG="position_max: {py_max}"
        RESPOND MSG="position_endstop: {py_max}  # Adjust if your endstop is different"
        RESPOND MSG=""
        RESPOND MSG="[quad_gantry_level]"
        RESPOND MSG="gantry_corners:"
        RESPOND MSG="    {gx_min},{gy_min}"
        RESPOND MSG="    {gx_max},{gy_max}"
        RESPOND MSG="points:"
        RESPOND MSG="    {fl_x},{fl_y}     # FL - Front Left"
        RESPOND MSG="    {bl_x},{bl_y}     # BL - Back Left"  
        RESPOND MSG="    {br_x},{br_y}     # BR - Back Right"
        RESPOND MSG="    {fr_x},{fr_y}     # FR - Front Right"
        RESPOND MSG="speed: 200"
        RESPOND MSG="horizontal_move_z: 10"
        RESPOND MSG="retries: 5"
        RESPOND MSG="retry_tolerance: 0.0075"
        RESPOND MSG="max_adjust: 10"
        RESPOND MSG=""
        RESPOND MSG="[bed_mesh]"
        RESPOND MSG="speed: 300"
        RESPOND MSG="horizontal_move_z: 10"
        RESPOND MSG="mesh_min: {mx_min},{my_min}"
        RESPOND MSG="mesh_max: {mx_max},{my_max}"
        RESPOND MSG="probe_count: 5,5"
        RESPOND MSG="mesh_pps: 2,2"
        RESPOND MSG="algorithm: bicubic"
        RESPOND MSG="bicubic_tension: 0.2"
        RESPOND MSG="move_check_distance: 5"
        RESPOND MSG="split_delta_z: 0.025"
        RESPOND MSG="==============================================================="
    {% endif %}

[gcode_macro TEST_NEW_CONFIG]
description: Test the optimized configuration safely
gcode:
    RESPOND TYPE=command MSG="Testing Optimized Configuration..."
    
    # Home first
    G28
    RESPOND MSG="Homing successful"
    
    # Test quad gantry level
    RESPOND MSG="Testing quad gantry leveling..."
    {% if "quad_gantry_level" in printer %}
        QUAD_GANTRY_LEVEL
        RESPOND MSG="Quad gantry level successful"
    {% else %}
        RESPOND MSG="WARNING: No QGL configuration found"
    {% endif %}
    
    # Test bed mesh
    RESPOND MSG="Testing bed mesh calibration..."
    {% if "bed_mesh" in printer %}
        BED_MESH_CALIBRATE PROFILE=test_mesh
        RESPOND MSG="Bed mesh calibration successful"
        BED_MESH_CLEAR
    {% else %}
        RESPOND MSG="WARNING: No bed mesh configuration found"
    {% endif %}
    
    RESPOND MSG="Configuration test completed successfully!"
    RESPOND MSG="Your optimized settings are working properly."

[gcode_macro RESET_CALIBRATION_DATA]
description: Clear all stored calibration measurements
gcode:
    # Clear limit measurements
    SAVE_VARIABLE VARIABLE=measured_x_min VALUE=0
    SAVE_VARIABLE VARIABLE=measured_x_max VALUE=0  
    SAVE_VARIABLE VARIABLE=measured_y_min VALUE=0
    SAVE_VARIABLE VARIABLE=measured_y_max VALUE=0
    SAVE_VARIABLE VARIABLE=limits_calibrated VALUE=0
    
    # Clear bed corner positions
    SAVE_VARIABLE VARIABLE=bed_corner_fl_x VALUE=0
    SAVE_VARIABLE VARIABLE=bed_corner_fl_y VALUE=0
    SAVE_VARIABLE VARIABLE=bed_corner_fr_x VALUE=0
    SAVE_VARIABLE VARIABLE=bed_corner_fr_y VALUE=0
    SAVE_VARIABLE VARIABLE=bed_corner_bl_x VALUE=0
    SAVE_VARIABLE VARIABLE=bed_corner_bl_y VALUE=0
    SAVE_VARIABLE VARIABLE=bed_corner_br_x VALUE=0
    SAVE_VARIABLE VARIABLE=bed_corner_br_y VALUE=0
    
    # Clear calculated bed values
    SAVE_VARIABLE VARIABLE=bed_origin_x VALUE=0
    SAVE_VARIABLE VARIABLE=bed_origin_y VALUE=0
    SAVE_VARIABLE VARIABLE=measured_bed_width VALUE=0
    SAVE_VARIABLE VARIABLE=measured_bed_height VALUE=0
    SAVE_VARIABLE VARIABLE=bed_calibrated VALUE=0
    SAVE_VARIABLE VARIABLE=config_generated VALUE=0
    
    # Clear optimized config variables
    SAVE_VARIABLE VARIABLE=opt_position_min_x VALUE=0
    SAVE_VARIABLE VARIABLE=opt_position_max_x VALUE=0
    SAVE_VARIABLE VARIABLE=opt_position_min_y VALUE=0
    SAVE_VARIABLE VARIABLE=opt_position_max_y VALUE=0
    
    RESPOND MSG="All calibration data cleared."
    RESPOND MSG="Run FULL_AUTO_CALIBRATION to start fresh."
